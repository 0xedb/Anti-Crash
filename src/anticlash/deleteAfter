### TODO 
-- remove landingbg.jpg



        for (Course c : courseList) {
            for (String a : c.getDays()) {
                switch (a) {
                    case "Mon":
                        mondayList.add(c);
                        break;
                    case "Tue":
                        tuesdayList.add(c);
                        break;
                    case "Wed":
                        wednesdayList.add(c);
                        break;
                    case "Thur":
                        thursdayList.add(c);
                        break;
                    case "Fri":
                        fridayList.add(c);
                        break;
                    case "Sat":
                        saturdayList.add(c);
                        break;
                    case "Sun":
                        sundayList.add(c);
                        break;
                    default:
                        // error
                        break;
                }
            }







        
        }

        //Testing
//        for (Course v : fridayList) {
//            System.out.println(v);
//        }
        for (Course vv : mondayList) {
            System.out.println(vv.getCourseTitle() + "\t" + vv.getCourseId());
        }





//        mondayList.clear();wednesdayList.clear();
//        tuesdayList.clear();thursdayList.clear();
//        fridayList.clear();saturdayList.clear();
//        sundayList.clear();


//private void putCourse(Course subject, ArrayList<String> array) {
//        for (String w : array) {
//            switch (w) {
//                case "Mon":
//                    mondayList.add(subject);
//                    break;
//                case "Tue":
//                    tuesdayList.add(subject);
//                    break;
//                case "Wed":
//                    tuesdayList.add(subject);
//                    break;
//                case "Thur":
//                    tuesdayList.add(subject);
//                    break;
//                case "Fri":
//                    tuesdayList.add(subject);
//                    break;
//                case "Sat":
//                    tuesdayList.add(subject);
//                    break;
//                case "Sun":
//                    tuesdayList.add(subject);
//                    break;
//                default:
//                    break;
//            }
//        }
//    }




ArrayList<String> days = days();
        if (isInfoValid()) {
            Course value = new Course(course, id, sTime, eTime, required.isSelected(), days);
            courseMap.put(id, value);
            putCourse(value, days);
            courseList.add(value);
            courseTitle.clear();
            courseID.clear();

        }




@FXML
    private void selectWeekend(ActionEvent event) {
        uncheckAll();
        sat.setSelected(true);
        sun.setSelected(true);

    }



@FXML
    private void add(ActionEvent event) {
        
    }




@FXML
    private void selectAll(ActionEvent event) {
        checkeAll();
    }

    @FXML
    private void selectWeekday(ActionEvent event) {
        checkeAll();
        sat.setSelected(false);
        sun.setSelected(false);

    }

    

    

    private void checkeAll() {
        for (JFXCheckBox a : chb) {
            a.setSelected(true);
        }
    }

    private void uncheckAll() {
        for (JFXCheckBox a : chb) {
            a.setSelected(false);
        }
    }



chb.add(mon);
        chb.add(tue);
        chb.add(wed);
        chb.add(thur);
        chb.add(fri);
        chb.add(sat);
        chb.add(sun);




        mon.setTooltip(new Tooltip("Monday"));
        tue.setTooltip(new Tooltip("Tuesday"));
        wed.setTooltip(new Tooltip("Wednesday"));
        thur.setTooltip(new Tooltip("Thursday"));
        fri.setTooltip(new Tooltip("Friday"));
        sat.setTooltip(new Tooltip("Saturday"));
        sun.setTooltip(new Tooltip("Sunday"));      




    private ArrayList<JFXCheckBox> chb = new ArrayList<>();
    private HashMap<String, Course> courseMap = new HashMap<>();
    BooleanProperty hasClashed = new SimpleBooleanProperty(false);

    String course, id;
    LocalTime sTime, eTime;

    ArrayList<Course> mondayList = new ArrayList<>();
    ArrayList<Course> tuesdayList = new ArrayList<>();
    ArrayList<Course> wednesdayList = new ArrayList<>();
    ArrayList<Course> thursdayList = new ArrayList<>();
    ArrayList<Course> fridayList = new ArrayList<>();
    ArrayList<Course> saturdayList = new ArrayList<>();
    ArrayList<Course> sundayList = new ArrayList<>();
    private ObservableList<Course> courseList = FXCollections.observableArrayList();

    ArrayList<Course> clashLedger = new ArrayList<>();


private boolean isInfoValid() {
        return isCourseValid() && isTimeValid() && isDayValid();
    }

    private boolean isCourseValid() {
        id = courseID.getText().trim();
        course = courseTitle.getText().trim();
        return course.length() > 0
                && id.length() > 0
                && (courseMap == null || !courseMap.containsKey(id));

    }

    private boolean isTimeValid() {
        sTime = startTime.getValue();
        eTime = endTime.getValue();
        return ((sTime != null) && (eTime != null)) && sTime.isBefore(eTime);
    }

    private boolean isDayValid() {
        return mon.isSelected() || tue.isSelected()
                || wed.isSelected() || thur.isSelected()
                || fri.isSelected() || sat.isSelected()
                || sun.isSelected();
    }

    private ArrayList<String> days() {
        ArrayList<String> days = new ArrayList<>();
        for (JFXCheckBox a : chb) {
            if (a.isSelected()) {
                days.add(a.getText());
            }
        }
        return days;
    }

    

    private void delete(ActionEvent event) {
        uncheckAll();
    }

    @FXML
    private void clash(ActionEvent event) {
        for (Course vv : mondayList) {
            System.out.println(vv.getCourseTitle() + "\t" + vv.getCourseId());
        }
    }

    private void addToDayList(ArrayList<Course> list, Course c) {
        if (list.isEmpty()) {
            list.add(c);
            return;
        }
        Course current = list.get(0);
        if (!(c.getEndTime().isAfter(current.getStartTime()))) {
            list.add(0, c);
            return;
        } else if (!(c.getStartTime().isBefore(current.getStartTime()))) {
            list.add(c);
            return;
        } else {
            hasClashed.set(true);
            clashLedger.add(c);

        }

        if (hasClashed.get() == true) {
            Dialog<String> dialog = new Dialog<>();
            dialog.setTitle("Hellllllllllllllllllo");
            dialog.showAndWait();

        }